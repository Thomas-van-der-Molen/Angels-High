/*
AircraftModel.h
Will Chapman

09/07/2019
18/08/2019

	Header file for generating the physical properties of an aircraft

*/

#pragma once

#include "Components/AudioComponent.h"
#include "CoreMinimal.h"
#include "Engine/Classes/Components/ArrowComponent.h"
#include "EngineNozzle.h"
#include "GameFramework/Actor.h"

#include "AircraftModel.generated.h"

/**
 * The physical properties of an aircraft
 */
UCLASS()
class ANGELSHIGHWF_API AAircraftModel : public AActor
{
	GENERATED_BODY()
	
public:	
	// Sets default values for this actor's properties
	AAircraftModel();

	/**
		Sound Settings
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Sound")
		UAudioComponent* m_aEngineNoise;

	/*
		The physics properties of the aircraft

		For properties that are dependent on airflow, such as the Drag CE and Lift, these are represented as FVectors.
		A comparison vector is drawn between the direction of the airflow and the orientation of the aircraft. This is a unit
		vector and is used as a multiplier for the value of whatever property is in question. The magnitude of which is then
		used as the final value.

		Obviously, getting a magnitude is expensive and therefore the squared magnitude is used. This needs to be factored into
		the inputting of data into this parent class.
	*/

	/**
		Center of drag is the point at which all combined drag forces are said to act.
		Defined as an offset from the center of the AActor.
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Physics_Properties")
		FVector m_vCoD;

	/**
		Center of thrust is the point at which all combined thrust forces are said to act.
		Defined as an offset from the center of the AActor.
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Physics_Properties")
		FVector m_vCoT;

	/**
		Center of lift is the point at which all combined lift forces are said to act.
		Defined as an offset from the center of the AActor.
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Physics_Properties")
		FVector m_vCoL;

	/**
		Pitch CoEfficient describes the aircraft's rate of pitch (dependent on airspeed).
		TODO: Expand in module 11 to make this a vector, as this is relative to airflow?
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Physics_Properties")
		float m_fPitchCE;

	/**
		Roll CoEfficient describes the aircraft's rate of roll (dependent on airspeed)
		TODO: Expand in module 11 to make this a vector, as this is relative to airflow?
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Physics_Properties")
		float m_fRollCE;

	/**
		Yaw CoEfficient describes the aircraft's rate of yaw (dependent on airspeed)
		TODO: Expand in module 11 to make this a vector, as this is relative to airflow
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Physics_Properties")
		float m_fYawCE;

	//TODO: Add adverse yaw in module 11

	/**
		Drag CoEfficient is dependent on airflow relative to the aircraft. A quick turn could lead to the
		aircraft "flying" sideways for a brief second, and obviously the hug amount of drag stops this quickly.
		This will greatly affect not only the max speed of the aircraft, but also the handling.
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Physics_Properties")
		FVector m_vDragCE;

	/**
		A simplified drag CoEfficient for development that remains constant regardless of orientation to airflow.
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Physics_Properties")
		float m_fDragCESimplified;

	/**
		Lift CoEfficient describes how much lift is generated by the wing. At different orientations to the
		airflow this will produce different amounts of lift.
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Physics_Properties")
		FVector m_vLiftCE;

	/**
		A simplified lift CoEfficient for development that remains constant regardless of orientation to airflow.
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Physics_Properties")
		float m_fLiftCESimplified;

	/**
		The mass of the aircraft without weapons. In real life the empty mass would exclude the weight of fuel,
		but it is included here.
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Physics_Properties")
		float m_fEmptyMass;

	/**
		The mass of the aircraft including its weapon loadout. This is calculated after the desired loadout is
		selected, and is used in the actual flight physics calculations.
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Physics_Properties")
		float m_fPhysicsMass;

	/**
		The wing area of the aircraft
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Physics_Properties")
		float m_fWingArea;
	
	/**
		This is the maximum thrust output of all the aircraft's engines. This does not include afterburner.
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Physics_Properties")
		float m_fMaxThrust;
	
	/**
		This is the rate at which thrust approaches target thrust per second
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Physics_Properties")
		float m_fThrustAcceleration;

	/**
		The aircraft's thrust output with afterburner
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Physics_Properties")
		float m_fABThrust;

	/*
		Components of aircraft body
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Model")
		USceneComponent* m_mSceneRoot;

	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Model")
		UStaticMeshComponent* m_mBodyMesh;

	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Model")
		UChildActorComponent* m_mLeftEngine;
	
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Model")
		UChildActorComponent* m_mRightEngine;

	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Model")
		UParticleSystemComponent* m_aLeftContrail;

	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Model")
		UParticleSystemComponent* m_aRightContrail;

	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Model")
		USceneComponent* m_mControlSurfacesRoot;

	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Model")
		USceneComponent* m_mLeftAileronRoot;

	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Model")
		UStaticMeshComponent* m_mLeftAileronMesh;

	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Model")
		USceneComponent* m_mRightAileronRoot;

	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Model")
		UStaticMeshComponent* m_mRightAileronMesh;

	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Model")
		USceneComponent* m_mLeftRudderRoot;

	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Model")
		UStaticMeshComponent* m_mLeftRudderMesh;

	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Model")
		USceneComponent* m_mRightRudderRoot;

	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Model")
		UStaticMeshComponent* m_mRightRudderMesh;

	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Model")
		USceneComponent* m_mLeftElevatorRoot;

	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Model")
		UStaticMeshComponent* m_mLeftElevatorMesh;

	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Model")
		USceneComponent* m_mRightElevatorRoot;

	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Model")
		UStaticMeshComponent* m_mRightElevatorMesh;

	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Model")
		USceneComponent* m_mAirbrakeUpRoot;

	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Model")
		UStaticMeshComponent* m_mAirbrakeUpMesh;

	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Model")
		USceneComponent* m_mAirbrakeDownRoot;

	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Model")
		UStaticMeshComponent* m_mAirbrakeDownMesh;
	
	/*
		Arrow components that act as hardpoint locations
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Weapons")
		USceneComponent* m_mHardPointsRoot;
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Weapons")
		UArrowComponent* m_uCannonHardPoint;
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Weapons")
		UArrowComponent* m_uHardPoint1;
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Weapons")
		UArrowComponent* m_uHardPoint2;
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Weapons")
		UArrowComponent* m_uHardPoint3;
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Weapons")
		UArrowComponent* m_uHardPoint4;
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Weapons")
		UArrowComponent* m_uHardPoint5;
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Weapons")
		UArrowComponent* m_uHardPoint6;
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Weapons")
		UArrowComponent* m_uHardPoint7;
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Weapons")
		UArrowComponent* m_uHardPoint8;

	//Weapon reloading variables
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Weapons")
		float m_fCannonFireRate;
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Weapons")
		float m_fCannonHeatIncr;
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Weapons")
		float m_fCannonHeatDecr;
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Weapons")
		int m_iCannonAmmo;
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Weapons")
		float m_fFlaresFireRate;
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Weapons")
		int m_iFlaresAmmo;

	/*
		CONTROLS VALUES
	*/
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Control Surfaces")
		bool m_bCanards;
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Control Surfaces")
		float m_fMaxAileronAngle;
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Control Surfaces")
		float m_fMaxElevatorAngle;
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Control Surfaces")
		float m_fMaxRudderAngle;
	UPROPERTY(BlueprintReadWrite, EditAnywhere, SimpleDisplay, Category = "Control Surfaces")
		float m_fMaxAirbrakeAngle;

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;
	
private:

	/**
		Rotator used by the class so a new one isn't instantiated every tick
	*/
	FRotator m_rRotator;

	/**
		Vector used by the class so a new one isn't instantiated every tick
	*/
	FVector m_vVector;

	//Airbrake managed solely by the model
	float m_fCurrentAirbrake;
	float m_fTargetAirbrake;
	
public:	
	// Called every frame
	virtual void Tick(float DeltaTime) override;

	/*
		Set Control Surface Rotations
	*/
	void SetAileronAngle(float a_vAngle);
	void SetElevatorAngle(float a_vAngle);
	void SetRudderAngle(float a_vAngle);
	void SetAirbrakeAngle(float a_vAngle);

};
